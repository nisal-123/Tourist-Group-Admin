<!-- Modern Bookings Content -->
<div class="bookings-content">
  <div class="row mb-4" data-aos="fade-up">
    <div class="col-12">
      <h2 class="text-gradient fw-bold mb-2">Bookings</h2>
      <p class="text-muted mb-0">Manage customer bookings and reservations</p>
          </div>
        </div>

  <div class="row" data-aos="fade-up">
    <div class="col-12">
      <style>
        .bookings-card { max-height: calc(100vh - 180px); display: flex; flex-direction: column; overflow: hidden; }
        .bookings-toolbar { flex: 0 0 auto; }
        .bookings-table-wrap { flex: 1 1 auto; overflow: auto; }
        .bookings-pagination { flex: 0 0 auto; position: sticky; bottom: 0; background: #fff; }
        .table thead th { position: sticky; top: 0; z-index: 1; background: #f8f9fa; }
        .table td, .table th { vertical-align: middle; }
        .col-min { width: 1%; white-space: nowrap; }
        .truncate-2 { display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; max-width: 360px; }
        .truncate-1 { max-width: 220px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap; display: inline-block; }
      </style>
      <div class="card shadow-soft bookings-card">
        <div class="card-body bookings-toolbar">
          <div class="d-flex justify-content-between align-items-center mb-2">
              <div>
              <h5 class="mb-0">Successful Bookings</h5>
              <small class="text-muted">Showing payments with status: completed</small>
            </div>
            <div class="d-flex gap-2">
              <input id="searchInput" type="text" class="form-control" placeholder="Search name, email, booking #" style="max-width: 280px;">
              </div>
              </div>
            </div>
        <div class="table-responsive bookings-table-wrap">
          <table class="table table-hover align-middle mb-0">
                <thead class="table-light">
                  <tr>
                <th class="col-min">Booking #</th>
                <th>Customer</th>
                    <th>Package</th>
                <th>Travel Dates</th>
                <th class="col-min">Travelers</th>
                <th class="col-min">Amount</th>
                <th class="col-min">Status</th>
                <th class="col-min">Created</th>
                  </tr>
                </thead>
            <tbody id="bookingsTbody">
              <tr>
                <td colspan="8" class="text-center py-5 text-muted">Loading bookings...</td>
                  </tr>
                </tbody>
              </table>
            </div>
        <div class="d-flex justify-content-between align-items-center mt-2 bookings-pagination pt-2 px-3">
          <div>
            <span id="paginationInfo" class="text-muted small"></span>
          </div>
          <nav>
            <ul class="pagination mb-0">
              <li class="page-item"><button id="prevPage" class="page-link">Previous</button></li>
              <li class="page-item disabled"><span class="page-link" id="currentPage">1</span></li>
              <li class="page-item"><button id="nextPage" class="page-link">Next</button></li>
              </ul>
            </nav>
          </div>
        </div>
    </div>
  </div>

  <script>
  (function() {
    let currentPage = 1;
    let totalPages = 1;
    let cachedData = [];

    function formatDate(d) {
      if (!d) return '-';
      const date = new Date(d);
      if (Number.isNaN(date.getTime())) return '-';
      return date.toLocaleDateString();
    }

    function formatAmount(amount, currency) {
      if (typeof amount !== 'number') return '-';
      try {
        return new Intl.NumberFormat(undefined, { style: 'currency', currency: currency || 'USD' }).format(amount);
      } catch(e) {
        return `$${amount.toFixed(2)}`;
      }
    }

    function renderRows(rows) {
      const tbody = document.getElementById('bookingsTbody');
      if (!tbody) return;
      if (!rows || rows.length === 0) {
        tbody.innerHTML = '<tr><td colspan="8" class="text-center py-5 text-muted">No bookings found</td></tr>';
        return;
      }
      tbody.innerHTML = rows.map(b => {
        const name = b.customerInfo ? `${b.customerInfo.firstName || ''} ${b.customerInfo.lastName || ''}`.trim() : '-';
        const email = b.customerInfo?.email || '-';
        const pkg = b.tourPackageId ? `<div class=\"truncate-1\">${b.tourPackageId.title || '-'}</div><div class=\"small text-muted truncate-1\">${b.tourPackageId.location || ''}</div>` : '-';
        const dates = `${formatDate(b.travelInfo?.departureDate)} - ${formatDate(b.travelInfo?.returnDate)}`;
        const travelers = b.travelInfo?.numberOfTravelers ?? '-';
        const amount = formatAmount(b.paymentInfo?.amount, b.paymentInfo?.currency);
        const status = b.bookingStatus || 'confirmed';
        const payStatus = b.paymentInfo?.paymentStatus || 'completed';
        const created = formatDate(b.createdAt);
        return `
          <tr data-id=\"${b._id}\" class=\"booking-row\">
            <td class=\"fw-semibold col-min\">${b.bookingNumber || '-'}</td>
            <td>
              <div class=\"truncate-1\">${name}</div>
              <div class=\"small text-muted truncate-1\">${email}</div>
            </td>
            <td>${pkg}</td>
            <td class=\"truncate-2\">${dates}</td>
            <td class=\"col-min\">${travelers}</td>
            <td class=\"col-min\">${amount}</td>
            <td class=\"col-min\"> 
              <span class=\"badge bg-success-subtle text-success border border-success-subtle\">${payStatus}</span>
              <span class=\"badge bg-primary-subtle text-primary border border-primary-subtle ms-1\">${status}</span>
            </td>
            <td class=\"col-min\">${created}</td>
          </tr>
        `;
      }).join('');

      // attach click handlers
      Array.from(tbody.querySelectorAll('.booking-row')).forEach(row => {
        row.addEventListener('click', async () => {
          const id = row.getAttribute('data-id');
          try {
            const res = await fetch(`/api/bookings/${id}`);
            if (!res.ok) throw new Error('Failed to fetch booking');
            const b = await res.json();
            showReceiptModal(b);
          } catch (e) {
            console.error(e);
          }
        });
      });
    }

    async function loadPage(page) {
      const tbody = document.getElementById('bookingsTbody');
      if (tbody) tbody.innerHTML = '<tr><td colspan="8" class="text-center py-5 text-muted">Loading bookings...</td></tr>';
      const res = await fetch(`/api/bookings?page=${page}`);
      if (!res.ok) {
        if (tbody) tbody.innerHTML = '<tr><td colspan="8" class="text-center py-5 text-danger">Failed to load bookings</td></tr>';
        return;
      }
      const data = await res.json();
      currentPage = data.page;
      totalPages = data.totalPages;
      cachedData = data.bookings || [];
      document.getElementById('currentPage').textContent = String(currentPage);
      document.getElementById('paginationInfo').textContent = `Page ${currentPage} of ${totalPages} Â· ${data.total} total`;
      document.getElementById('prevPage').disabled = currentPage <= 1;
      document.getElementById('nextPage').disabled = currentPage >= totalPages;
      applyFilter();
    }

    function applyFilter() {
      const q = (document.getElementById('searchInput').value || '').toLowerCase();
      if (!q) {
        renderRows(cachedData);
        return;
      }
      const rows = cachedData.filter(b => {
        const name = `${b.customerInfo?.firstName || ''} ${b.customerInfo?.lastName || ''}`.toLowerCase();
        const email = (b.customerInfo?.email || '').toLowerCase();
        const number = (b.bookingNumber || '').toLowerCase();
        return name.includes(q) || email.includes(q) || number.includes(q);
      });
      renderRows(rows);
    }

    document.addEventListener('DOMContentLoaded', () => {
      document.getElementById('prevPage').addEventListener('click', () => {
        if (currentPage > 1) loadPage(currentPage - 1);
      });
      document.getElementById('nextPage').addEventListener('click', () => {
        if (currentPage < totalPages) loadPage(currentPage + 1);
      });
      document.getElementById('searchInput').addEventListener('input', applyFilter);
      loadPage(1);
    });

    // Receipt modal helper
    function showReceiptModal(booking) {
      const product = booking.tourPackageId || booking.hikingId || {};
      const modal = document.createElement('div');
      modal.className = 'modal fade';
      modal.id = 'adminBookingReceiptModal';
      modal.innerHTML = `
        <div class="modal-dialog modal-lg">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title">Booking Receipt - ${booking.bookingNumber}</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
              <div class="row g-3">
                <div class="col-md-6">
                  <div><strong>Package:</strong> ${product.title || '-'}</div>
                  <div><strong>Location:</strong> ${product.location || '-'}</div>
                  <div><strong>Duration:</strong> ${product.duration || '-'}</div>
                </div>
                <div class="col-md-6">
                  <div><strong>Customer:</strong> ${booking.customerInfo.firstName} ${booking.customerInfo.lastName}</div>
                  <div><strong>Email:</strong> ${booking.customerInfo.email}</div>
                  <div><strong>Phone:</strong> ${booking.customerInfo.phone}</div>
                </div>
                <div class="col-md-6">
                  <div><strong>Departure:</strong> ${new Date(booking.travelInfo.departureDate).toLocaleDateString()}</div>
                  <div><strong>Return:</strong> ${new Date(booking.travelInfo.returnDate).toLocaleDateString()}</div>
                  <div><strong>Travelers:</strong> ${booking.travelInfo.numberOfTravelers}</div>
                </div>
                <div class="col-md-6">
                  <div><strong>Amount:</strong> $${booking.paymentInfo.amount.toLocaleString()} ${booking.paymentInfo.currency}</div>
                  <div><strong>Status:</strong> ${booking.paymentInfo.paymentStatus}</div>
                  <div><strong>Created:</strong> ${new Date(booking.createdAt).toLocaleString()}</div>
                </div>
              </div>
            </div>
            <div class="modal-footer">
              <a href="/bookings/${booking._id}/download" class="btn btn-primary">
                <i class="bi bi-download me-1"></i> Download Receipt
              </a>
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
          </div>
        </div>`;
      document.body.appendChild(modal);
      const bsModal = new bootstrap.Modal(modal);
      bsModal.show();
      modal.addEventListener('hidden.bs.modal', () => modal.remove());
    }
  })();
  </script>
